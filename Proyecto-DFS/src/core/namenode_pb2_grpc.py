# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import namenode_pb2 as namenode__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in namenode_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class NameNodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDataNode = channel.unary_unary(
                '/NameNodeService/RegisterDataNode',
                request_serializer=namenode__pb2.RegisterRequest.SerializeToString,
                response_deserializer=namenode__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/NameNodeService/Heartbeat',
                request_serializer=namenode__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=namenode__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.AllocateBlocks = channel.unary_unary(
                '/NameNodeService/AllocateBlocks',
                request_serializer=namenode__pb2.AllocateBlocksRequest.SerializeToString,
                response_deserializer=namenode__pb2.AllocateBlocksResponse.FromString,
                _registered_method=True)
        self.GetBlockLocations = channel.unary_unary(
                '/NameNodeService/GetBlockLocations',
                request_serializer=namenode__pb2.BlockLocationRequest.SerializeToString,
                response_deserializer=namenode__pb2.BlockLocationResponse.FromString,
                _registered_method=True)
        self.GetFileBlocks = channel.unary_unary(
                '/NameNodeService/GetFileBlocks',
                request_serializer=namenode__pb2.FileBlocksRequest.SerializeToString,
                response_deserializer=namenode__pb2.FileBlocksResponse.FromString,
                _registered_method=True)
        self.AddFile = channel.unary_unary(
                '/NameNodeService/AddFile',
                request_serializer=namenode__pb2.AddFileRequest.SerializeToString,
                response_deserializer=namenode__pb2.AddFileResponse.FromString,
                _registered_method=True)
        self.ListFiles = channel.unary_unary(
                '/NameNodeService/ListFiles',
                request_serializer=namenode__pb2.ListFilesRequest.SerializeToString,
                response_deserializer=namenode__pb2.ListFilesResponse.FromString,
                _registered_method=True)
        self.Mkdir = channel.unary_unary(
                '/NameNodeService/Mkdir',
                request_serializer=namenode__pb2.MkdirRequest.SerializeToString,
                response_deserializer=namenode__pb2.MkdirResponse.FromString,
                _registered_method=True)
        self.Rmdir = channel.unary_unary(
                '/NameNodeService/Rmdir',
                request_serializer=namenode__pb2.RmdirRequest.SerializeToString,
                response_deserializer=namenode__pb2.RmdirResponse.FromString,
                _registered_method=True)
        self.RemoveFile = channel.unary_unary(
                '/NameNodeService/RemoveFile',
                request_serializer=namenode__pb2.RemoveFileRequest.SerializeToString,
                response_deserializer=namenode__pb2.RemoveFileResponse.FromString,
                _registered_method=True)


class NameNodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterDataNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AllocateBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBlockLocations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetFileBlocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListFiles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mkdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rmdir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NameNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDataNode': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDataNode,
                    request_deserializer=namenode__pb2.RegisterRequest.FromString,
                    response_serializer=namenode__pb2.RegisterResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=namenode__pb2.HeartbeatRequest.FromString,
                    response_serializer=namenode__pb2.HeartbeatResponse.SerializeToString,
            ),
            'AllocateBlocks': grpc.unary_unary_rpc_method_handler(
                    servicer.AllocateBlocks,
                    request_deserializer=namenode__pb2.AllocateBlocksRequest.FromString,
                    response_serializer=namenode__pb2.AllocateBlocksResponse.SerializeToString,
            ),
            'GetBlockLocations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBlockLocations,
                    request_deserializer=namenode__pb2.BlockLocationRequest.FromString,
                    response_serializer=namenode__pb2.BlockLocationResponse.SerializeToString,
            ),
            'GetFileBlocks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFileBlocks,
                    request_deserializer=namenode__pb2.FileBlocksRequest.FromString,
                    response_serializer=namenode__pb2.FileBlocksResponse.SerializeToString,
            ),
            'AddFile': grpc.unary_unary_rpc_method_handler(
                    servicer.AddFile,
                    request_deserializer=namenode__pb2.AddFileRequest.FromString,
                    response_serializer=namenode__pb2.AddFileResponse.SerializeToString,
            ),
            'ListFiles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListFiles,
                    request_deserializer=namenode__pb2.ListFilesRequest.FromString,
                    response_serializer=namenode__pb2.ListFilesResponse.SerializeToString,
            ),
            'Mkdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Mkdir,
                    request_deserializer=namenode__pb2.MkdirRequest.FromString,
                    response_serializer=namenode__pb2.MkdirResponse.SerializeToString,
            ),
            'Rmdir': grpc.unary_unary_rpc_method_handler(
                    servicer.Rmdir,
                    request_deserializer=namenode__pb2.RmdirRequest.FromString,
                    response_serializer=namenode__pb2.RmdirResponse.SerializeToString,
            ),
            'RemoveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFile,
                    request_deserializer=namenode__pb2.RemoveFileRequest.FromString,
                    response_serializer=namenode__pb2.RemoveFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'NameNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('NameNodeService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NameNodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterDataNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/RegisterDataNode',
            namenode__pb2.RegisterRequest.SerializeToString,
            namenode__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/Heartbeat',
            namenode__pb2.HeartbeatRequest.SerializeToString,
            namenode__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AllocateBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/AllocateBlocks',
            namenode__pb2.AllocateBlocksRequest.SerializeToString,
            namenode__pb2.AllocateBlocksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetBlockLocations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/GetBlockLocations',
            namenode__pb2.BlockLocationRequest.SerializeToString,
            namenode__pb2.BlockLocationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetFileBlocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/GetFileBlocks',
            namenode__pb2.FileBlocksRequest.SerializeToString,
            namenode__pb2.FileBlocksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/AddFile',
            namenode__pb2.AddFileRequest.SerializeToString,
            namenode__pb2.AddFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/ListFiles',
            namenode__pb2.ListFilesRequest.SerializeToString,
            namenode__pb2.ListFilesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Mkdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/Mkdir',
            namenode__pb2.MkdirRequest.SerializeToString,
            namenode__pb2.MkdirResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rmdir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/Rmdir',
            namenode__pb2.RmdirRequest.SerializeToString,
            namenode__pb2.RmdirResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/NameNodeService/RemoveFile',
            namenode__pb2.RemoveFileRequest.SerializeToString,
            namenode__pb2.RemoveFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
